
Imports

    >>> from owslib.wms import WebMapService
    
Fake a request to a WMS Server using saved doc from 
http://wms.jpl.nasa.gov/wms.cgi.

    >>> xml = open_file('JPLCapabilities.xml', 'r').read() 
    >>> wms = WebMapService('url', version='1.1.1', xml=xml)
    
Test capabilities
-----------------

    >>> wms.identification.type
    'OGC:WMS'
    >>> wms.identification.version
    '1.1.1'
    >>> wms.identification.title
    'JPL Global Imagery Service'
    >>> wms.identification.abstract
    'WMS Server maintained by JPL, worldwide satellite imagery.'
    >>> wms.identification.keywords
    ['ImageryBaseMapsEarthCover', 'Imagery', 'BaseMaps', 'EarthCover', 'JPL', 'Jet Propulsion Laboratory', 'Landsat', 'WMS', 'SLD', 'Global']
    >>> wms.identification.accessconstraints
    'Server is load limited'
    >>> wms.identification.fees
    'none'
    >>> wms.provider.name
    'JPL'
    >>> wms.provider.url
    'http://OnEarth.jpl.nasa.gov/index.html'
    >>> wms.provider.contact
    'lucian.plesea@jpl.nasa.gov'

    
Test available content layers
    >>> type(wms.items())
    <type 'list'>
    >>> type(wms.contents)
    <type 'dict'>

NOTE: Not sure this dictionary interface is right...??

    >>> wms.contents.keys()
    [None, 'us_landsat_wgs84', 'global_mosaic_base', 'huemapped_srtm', 'srtm_mag', 'daily_terra', 'modis', 'us_elevation', 'global_mosaic', 'daily_terra_ndvi', 'daily_aqua_ndvi', 'daily_aqua_721', 'daily_aqua', 'BMNG', 'srtmplus', 'us_colordem', 'worldwind_dem', 'us_ned', 'daily_terra_721']
    
    >>> [wms[layer].id for layer in wms.contents]
    [None, 'us_landsat_wgs84', 'global_mosaic_base', 'huemapped_srtm', 'srtm_mag', 'daily_terra', 'modis', 'us_elevation', 'global_mosaic', 'daily_terra_ndvi', 'daily_aqua_ndvi', 'daily_aqua_721', 'daily_aqua', 'BMNG', 'srtmplus', 'us_colordem', 'worldwind_dem', 'us_ned', 'daily_terra_721']

 
Test single item accessor
    
    >>> wms['global_mosaic'].title
    'WMS Global Mosaic, pan sharpened'

        
    >>> wms['global_mosaic'].boundingBox

    >>> wms['global_mosaic'].boundingBoxWGS84
    (-180.0, -60.0, 180.0, 84.0)
    
    >>> wms['global_mosaic'].crsOptions
    ['EPSG:4326', 'AUTO:42003']
    
    >>> wms['global_mosaic'].styles
    {'pseudo_bright': {'title': 'Pseudo-color image (Uses IR and Visual bands, 542 mapping), gamma 1.5'}, 'pseudo': {'title': '(default) Pseudo-color image, pan sharpened (Uses IR and Visual bands, 542 mapping), gamma 1.5'}, 'visual': {'title': 'Real-color image, pan sharpened (Uses the visual bands, 321 mapping), gamma 1.5'}, 'pseudo_low': {'title': 'Pseudo-color image, pan sharpened (Uses IR and Visual bands, 542 mapping)'}, 'visual_low': {'title': 'Real-color image, pan sharpened (Uses the visual bands, 321 mapping)'}, 'visual_bright': {'title': 'Real-color image (Uses the visual bands, 321 mapping), gamma 1.5'}}
    
Expect a KeyError for invalid names

    >>> wms['utterly bogus'].title
    Traceback (most recent call last):
    ...
    KeyError: 'No content named utterly bogus'

Test operations

    >>> [op.name for op in wms.operations]
    ['GetCapabilities', 'GetMap']
    
    >>> wms.getOperationByName('GetMap').methods
    {'Get': {'url': 'http://wms.jpl.nasa.gov/wms.cgi?'}}
    
    >>> wms.getOperationByName('GetMap').formatOptions
    ['image/jpeg', 'image/png', 'image/geotiff', 'image/tiff']

Test exceptions

    >>> wms.exceptions
    ['application/vnd.ogc.se_xml']

Lastly, test the getcapabilities method

    >>> wms = WebMapService('http://wms.jpl.nasa.gov/wms.cgi', version='1.1.1')
    >>> xml = wms.getcapabilities().read()
    >>> xml.find('<WMT_MS_Capabilities version="1.1.1">') > 0
    True
    >>> img = wms.getmap(   layers=['global_mosaic'], styles=['visual_bright'],                  srs='EPSG:4326', bbox=(-112, 36, -106, 41), size=(300, 250), format='image/jpeg',         transparent=True)
    >>> out = open('jpl_mosaic_visb.jpg', 'wb')
    >>> out.write(img.read())
    >>> out.close()
