Python doctest file to simulate a WPS DescribeProcess invocation.
This test does not execute any live HTTP request, rather it parses XML files containing pre-made HTTP responses.
To run: python -m doctest wps_describeprocess.txt
----------------------------------------------------------------------------------------------------------------

Import python modules
>>> from owslib.wps import WebProcessingService

Initialize WPS client
>>> wps = WebProcessingService('http://cida.usgs.gov/climate/gdp/process/WebProcessingService')

Execute fake invocation of DescribeProcess operation by parsing cached response from USGS service
>>> xml = open('./USGSDescribeProcess.xml', 'r').read()
>>> process = wps.describeprocess('gov.usgs.cida.gdp.wps.algorithm.FeatureWeightedGridStatisticsAlgorithm', xml=xml)

Check process description
>>> process.identifier
'gov.usgs.cida.gdp.wps.algorithm.FeatureWeightedGridStatisticsAlgorithm'
>>> process.title
'Feature Weighted Grid Statistics'
>>> process.abstract
'This algorithm generates area weighted statistics of a gridded dataset for a set of vector polygon features. Using the bounding-box that encloses the feature data and the time range, if provided, a subset of the gridded dataset is requested from the remote gridded data server. Polygon representations are generated for cells in the retrieved grid. The polygon grid-cell representations are then projected to the feature data coordinate reference system. The grid-cells are used to calculate per grid-cell feature coverage fractions. Area-weighted statistics are then calculated for each feature using the grid values and fractions as weights. If the gridded dataset has a time range the last step is repeated for each time step within the time range or all time steps if a time range was not supplied.'

Check process inputs
>>> for input in process.dataInputs:
...     input.identifier, input.dataType, input.minOccurs, input.maxOccurs
... 
('FEATURE_COLLECTION', 'ComplexData', 1, 1)
('DATASET_URI', 'anyURI', 1, 1)
('DATASET_ID', 'string', 1, 2147483647)
('REQUIRE_FULL_COVERAGE', 'boolean', 1, 1)
('TIME_START', 'dateTime', 0, 1)
('TIME_END', 'dateTime', 0, 1)
('FEATURE_ATTRIBUTE_NAME', 'string', 1, 1)
('DELIMITER', 'string', 1, 1)
('STATISTICS', 'string', 1, 7)
('GROUP_BY', 'string', 1, 1)
('SUMMARIZE_TIMESTEP', 'boolean', 0, 1)
('SUMMARIZE_FEATURE_ATTRIBUTE', 'boolean', 0, 1)

Check process outputs
>>> for output in process.processOutputs:
...     output.identifier, output.dataType
... 
('OUTPUT', 'ComplexData')

